
typedef struct RSAPublicKeyInstance {
  int len;  // Length of n[] in number of uint32_t
  uint32_t n0inv;  // -1 / n[0] mod 2^32
  uint32_t n[RSANUMWORDS];  // modulus as little endian array
  uint32_t rr[RSANUMWORDS];  // R^2 as little endian array
} RSAPublicKeyInstance;

// a[] -= mod
void subM(RSAPublicKey key,
                 uint32_t* a) {
  int64_t A = 0;
  int i;
  for (i = 0; i < key->len; ++i) {
    A += (uint64_t)a[i] - key->n[i];
    a[i] = (uint32_t)A;
    A >>= 32;
  }
}

00000ca4 <subM>:
     ca4:	b5f0      	push	{r4, r5, r6, r7, lr}
     ca6:	2200      	movs	r2, #0
     ca8:	2300      	movs	r3, #0
     caa:	b085      	sub	sp, #20
     
     cac:	2600      	movs	r6, #0
     cae:	6804      	ldr	r4, [r0, #0]           ;r4 = key->len
     cb0:	42a6      	cmp	r6, r4                 ; i < key->len
     cb2:	da16      	bge.n	ce2 <subM+0x3e>
     cb4:	680c      	ldr	r4, [r1, #0]           ; a[i]
     cb6:	00b7      	lsls	r7, r6, #2         ; r7 = r6 << 2  逻辑作揖  r6 * 4  r6:index
     cb8:	19c7      	adds	r7, r0, r7         ; r7 = r0 + r7   key + offset
     cba:	9400      	str	r4, [sp, #0]        
     cbc:	68bf      	ldr	r7, [r7, #8]           ; key->n[i]
     cbe:	2400      	movs	r4, #0             ; r4 = 0
     cc0:	9401      	str	r4, [sp, #4]           ; 高32位为0
     cc2:	9c00      	ldr	r4, [sp, #0]           ;r4 = a[i] 低32位
     cc4:	9d01      	ldr	r5, [sp, #4]           ;r5 = h32(a[i])
     cc6:	18a4      	adds	r4, r4, r2         ; r4 = r4 + r2   r2 = l32(A)
     cc8:	415d      	adcs	r5, r3             ; r5 = r5 + r3;  r3 = h32(A)  实现A += 
     cca:	2200      	movs	r2, #0
     ccc:	9702      	str	r7, [sp, #8]
     cce:	9203      	str	r2, [sp, #12]
     cd0:	9a02      	ldr	r2, [sp, #8]           ; r2 = l32(key->n[i])
     cd2:	9b03      	ldr	r3, [sp, #12]          ; r3 = h32(key->n[i])
     cd4:	1aa4      	subs	r4, r4, r2         ; r4 - r2 ==> l32
     cd6:	419d      	sbcs	r5, r3             ; 带借位减法  r5 --> h32
     cd8:	c110      	stmia	r1!, {r4}          ; [r1] = r4
     
     cda:	1c2a      	adds	r2, r5, #0        ; r2 = l32(A)    A >>= 32     低32位被丢弃，高32位占据低32位
     cdc:	17eb      	asrs	r3, r5, #31       ; r3 = h32(A)    高32位被最高位的所填充 如果是1 高32位就全为1
     cde:	3601      	adds	r6, #1            ; i++
     ce0:	e7e5      	b.n	cae <subM+0xa>
     
     ce2:	b005      	add	sp, #20
     ce4:	bdf0      	pop	{r4, r5, r6, r7, pc}
     
B或BL指令引起处理器转移到“子程序名”处开始执行。两者的不同之处在于BL指令在转移到子程序执行之前，将其下一条指令的地址拷贝到R14（LR,链 接寄存器）。

// return a[] >= mod
int geM(RSAPublicKey key,
               const uint32_t* a) {
  int i;
  for (i = key->len; i;) {
    --i;
    if (a[i] < key->n[i]) return 0;
    if (a[i] > key->n[i]) return 1;
  }
  return 1;  // equal
} 

条件码标志
  N、Z、C、V均为条件码标志位。它们的内容可被算术或逻辑运算的结果所改变, 并且可以决定某条指令是否被执行。条件码标志各位的具体含义如下表所示:
    N――本位设置成当前指令运算结果的bit[31]的值。当两个表示的有符号整数运算时, n=1表示运算结果为负数, n=0表示结果为正书或零。
    Z――Z=1表示运算的结果为零；Z=0表示运算的结果不为零。对于CMP指令, Z=1表示进行比较的两个数大小相等。
    V――对于加减运算指令, 当操作数和运算结果为二进制的补码表示的带符号数时, V=1表示符号为溢出；通常其他指令不影响V位。
    C――下面分四种情况讨论C的设置方法:
      在加法指令中（包括比较指令CMN）, 当结果产生了进位,则C=1,表示无符号运算发生上溢出；其他情况C=0。
      在减法指令中（包括比较指令CMP）, 当运算中发生借位, 则C=0, 表示无符号运算数发生下溢出；其他情况下C=1。
      对于包含移位操作的非加减运算指令, C中包含最后一次溢出的的位的数值,
      对于其他非加减运算指令, C位的值通常不受影响    
00000ce6 <geM>:
     ce6:	b510      	push	{r4, lr}
     
     ce8:	6803      	ldr	r3, [r0, #0]         ; r3 = key->len
     cea:	2b00      	cmp	r3, #0               ; r3 <= 0 跳转
     cec:	d00a      	beq.n	d04 <geM+0x1e>
     cee:	3b01      	subs	r3, #1           ; r3 = r3 -1
     cf0:	009a      	lsls	r2, r3, #2       ; r2 = r3 * 4 = idx * 4
     cf2:	588c      	ldr	r4, [r1, r2]         ;r1 = base(a);   r4 = a[i]
     cf4:	1882      	adds	r2, r0, r2
     cf6:	6892      	ldr	r2, [r2, #8]         ; r2 = key->n[i]
     cf8:	4294      	cmp	r4, r2
     cfa:	d301      	bcc.n	d00 <geM+0x1a>   ; 如果无进位   BCC Branch if Carry Clear   r4 < r2
     cfc:	d9f5      	bls.n	cea <geM+0x4>    ; 如果小于等于 BLS Branch if Lower or Same
     cfe:	e001      	b.n	d04 <geM+0x1e>       ; 大于     B 跳转
     
     d00:	2000      	movs	r0, #0
     d02:	e000      	b.n	d06 <geM+0x20>
     
     d04:	2001      	movs	r0, #1
     
     d06:	bd10      	pop	{r4, pc}
 
// montgomery c[] = a[] * b[] / R % mod
 void montMul(RSAPublicKey key,
                    uint32_t* c,
                    const uint32_t* a,
                    const uint32_t* b) {
  int i;
  for (i = 0; i < key->len; ++i) {
    c[i] = 0;
  }
  for (i = 0; i < key->len; ++i) {
    montMulAdd(key, c, a[i], b);
  }
} 
00000e08 <montMul>:
     e08:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
     
     e0a:	1c1f      	adds	r7, r3, #0     ;b
     e0c:	2300      	movs	r3, #0
     e0e:	9201      	str	r2, [sp, #4]       ;a
     e10:	1c05      	adds	r5, r0, #0     ; key
     e12:	1c0e      	adds	r6, r1, #0     ; c
     e14:	1c1a      	adds	r2, r3, #0     ; 0
     
     e16:	6829      	ldr	r1, [r5, #0]       ; key->len     <------------------|
     e18:	428b      	cmp	r3, r1             ; i < key->len                    |
     e1a:	da03      	bge.n	e24 <montMul+0x1c>                               |
     e1c:	0099      	lsls	r1, r3, #2     ; i * 4                           |
     e1e:	5072      	str	r2, [r6, r1]       ; 0 --> c[i]   c[i] = 0;          |
     e20:	3301      	adds	r3, #1                                           |
     e22:	e7f8      	b.n	e16 <montMul+0xe>                           ---------|
     
     e24:	2400      	movs	r4, #0
     e26:	682b      	ldr	r3, [r5, #0] ;key->len
     e28:	429c      	cmp	r4, r3
     e2a:	da09      	bge.n	e40 <montMul+0x38>
     e2c:	9901      	ldr	r1, [sp, #4]     ; r1 = a
     e2e:	00a3      	lsls	r3, r4, #2   ; i * 4
     e30:	1c28      	adds	r0, r5, #0   ; r0 = key
     e32:	58ca      	ldr	r2, [r1, r3]     ; r2 = a[i]
     e34:	1c31      	adds	r1, r6, #0   ; r1 = c
     e36:	1c3b      	adds	r3, r7, #0   ; r3 = b
     e38:	f7ff ff66 	bl	d08 <montMulAdd> ; montMulAdd(key,c,a[i],b)
     e3c:	3401      	adds	r4, #1       ; i++
     e3e:	e7f2      	b.n	e26 <montMul+0x1e>
     
     e40:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
     

// montgomery c[] += a * b[] / R % mod
void montMulAdd(RSAPublicKey key,
                       uint32_t* c,
                       const uint32_t a,
                       const uint32_t* b) {
  uint64_t A = (uint64_t)a * b[0] + c[0];
  uint32_t d0 = (uint32_t)A * key->n0inv;
  uint64_t B = (uint64_t)d0 * key->n[0] + (uint32_t)A;
  int i;

  for (i = 1; i < key->len; ++i) {
    A = (A >> 32) + (uint64_t)a * b[i] + c[i];
    B = (B >> 32) + (uint64_t)d0 * key->n[i] + (uint32_t)A;
    c[i - 1] = (uint32_t)B;
  }

  A = (A >> 32) + (B >> 32);

  c[i - 1] = (uint32_t)A;

  if (A >> 32) {
    subM(key, c);
  }
}     
00000d08 <montMulAdd>:   key  c a b
     d08:	b5f0      	push	{r4, r5, r6, r7, lr}
     d0a:	b093      	sub	sp, #76	; 0x4c
     
     d0c:	9109      	str	r1, [sp, #36]	; 0x24   c
     d0e:	2100      	movs	r1, #0      ; r1 = 0
     d10:	1c04      	adds	r4, r0, #0  ; key
     d12:	9210      	str	r2, [sp, #64]	; 0x40   a
     d14:	1c10      	adds	r0, r2, #0  ; r0 = a
     d16:	1c1d      	adds	r5, r3, #0  ; r5 = b
     d18:	681a      	ldr	r2, [r3, #0]    ; r2 = b[0]
     d1a:	1c0b      	adds	r3, r1, #0  ; r3 = r1 + 0   = 0 
     d1c:	f000 f891 	bl	e42 <__aeabi_lmul>     r0 = l32(a) r1=h32(a) r2 = l32(b[0]) r3 = h32(b[0])
     d20:	9e09      	ldr	r6, [sp, #36]	; 0x24    base(c)
     d22:	2200      	movs	r2, #0
     d24:	9201      	str	r2, [sp, #4]    ; 0
     d26:	ce08      	ldmia	r6!, {r3}   ;r3 = c[0]   r6 + 4    c[1]
     d28:	9300      	str	r3, [sp, #0]    ; c[0]
     d2a:	9a00      	ldr	r2, [sp, #0]    ; r2 = l32(c[0])
     d2c:	9b01      	ldr	r3, [sp, #4]    ; r3 = h32(c[0])
     d2e:	1812      	adds	r2, r2, r0  ; r2 = r2 + r0  r0 = l32(ret)
     d30:	414b      	adcs	r3, r1      ; r3 = r3 + r1  r1 = h32(ret)
     d32:	6860      	ldr	r0, [r4, #4]    ; r0 = key->n0inv
     d34:	9202      	str	r2, [sp, #8]    ; l32(a*b[0]+c[0])  l32(A)
     d36:	9303      	str	r3, [sp, #12]   ; h32(a*b[0]+c[0])  h32(A)
     d38:	1c13      	adds	r3, r2, #0
     d3a:	4343      	muls	r3, r0      ; r3 = r3 * r0 = (uint32_t)A * key->n0inv  ==> d0
     d3c:	2100      	movs	r1, #0      ; r1 = h32(d0)=0
     d3e:	9311      	str	r3, [sp, #68]	; 0x44   d0 存放到栈
     d40:	1c18      	adds	r0, r3, #0  ; r0 = l32(d0)
     d42:	68a2      	ldr	r2, [r4, #8]    ; r2 = key->n[0]
     d44:	1c0b      	adds	r3, r1, #0  ; r3 = 0
     d46:	f000 f87c 	bl	e42 <__aeabi_lmul> ;  (uint64_t)d0 * key->n[0]
     d4a:	9a02      	ldr	r2, [sp, #8]       ; r2 = (uint32_t)A   l32(A)
     d4c:	9b01      	ldr	r3, [sp, #4]       ; r3 = 0
     d4e:	1880      	adds	r0, r0, r2     ; r0 = r0 + r2  l32(B)
     d50:	4159      	adcs	r1, r3         ; r1 = r1 + r3  h32(B)
     d52:	9006      	str	r0, [sp, #24]      ; l32(B)
     d54:	9107      	str	r1, [sp, #28]      ; h32(B)
     
     d56:	2101      	movs	r1, #1        
     d58:	9100      	str	r1, [sp, #0]
     d5a:	9800      	ldr	r0, [sp, #0]      ; r0 = 1 idx
     d5c:	6821      	ldr	r1, [r4, #0]      ; r1 = key->len
     d5e:	4288      	cmp	r0, r1
     d60:	da3c      	bge.n	ddc <montMulAdd+0xd4>
     d62:	6833      	ldr	r3, [r6, #0]      ; r3 = c[idx]
     d64:	9903      	ldr	r1, [sp, #12]     ; r1 = h32(A)
     d66:	9a00      	ldr	r2, [sp, #0]      ; r2 = 1
     d68:	2000      	movs	r0, #0        ; r0 = 0
     d6a:	9304      	str	r3, [sp, #16]              ; c[idx]
     d6c:	910a      	str	r1, [sp, #40]	; 0x28     ; h32(A)
     d6e:	900b      	str	r0, [sp, #44]	; 0x2c     ; 0
     d70:	9005      	str	r0, [sp, #20]              ; 0
     d72:	0097      	lsls	r7, r2, #2             ; r7 = r2 * 4 
     d74:	9804      	ldr	r0, [sp, #16]
     d76:	9905      	ldr	r1, [sp, #20]
     d78:	9a0a      	ldr	r2, [sp, #40]	; 0x28
     d7a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
     d7c:	1880      	adds	r0, r0, r2        r0 = r0 + r2
     d7e:	4159      	adcs	r1, r3            r1 = r1 + r3     (A>>32) + c[i]
     d80:	9002      	str	r0, [sp, #8]
     d82:	9103      	str	r1, [sp, #12]
     
     d84:	2100      	movs	r1, #0             ;r1  = 0
     d86:	59e8      	ldr	r0, [r5, r7]           ;r0 = b[i]
     d88:	9a10      	ldr	r2, [sp, #64]	; 0x40 ;r2 = a
     d8a:	1c0b      	adds	r3, r1, #0         ;r3 = 0
     d8c:	f000 f859 	bl	e42 <__aeabi_lmul>    ; a * b[i]
     d90:	9a02      	ldr	r2, [sp, #8]
     d92:	9b03      	ldr	r3, [sp, #12]
     d94:	1812      	adds	r2, r2, r0       ; r2 = L32((A >> 32) + (uint64_t)a * b[i] + c[i])
     d96:	414b      	adcs	r3, r1           ; r3 = H32((A >> 32) + (uint64_t)a * b[i] + c[i])
     d98:	9905      	ldr	r1, [sp, #20]            ;r1 = 0
     d9a:	19e7      	adds	r7, r4, r7       ; r7 = base(key) + idx * 4
     d9c:	9202      	str	r2, [sp, #8]         ; r2 = L32(A)
     d9e:	9303      	str	r3, [sp, #12]        ; r3 = H32(A)
     da0:	68b8      	ldr	r0, [r7, #8]             ; r0 = key->n[i]
     da2:	9a11      	ldr	r2, [sp, #68]	; 0x44   ; r2 = d0
     da4:	1c0b      	adds	r3, r1, #0           ; r3 = 0
     da6:	f000 f84c 	bl	e42 <__aeabi_lmul>       ; key->n[i] * d0
     daa:	9b07      	ldr	r3, [sp, #28]   ; h32(B)
     dac:	9a05      	ldr	r2, [sp, #20]   ; 0      ; 
     dae:	930c      	str	r3, [sp, #48]	; 0x30
     db0:	920d      	str	r2, [sp, #52]	; 0x34
     db2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
     db4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
     db6:	1880      	adds	r0, r0, r2
     db8:	4159      	adcs	r1, r3
     dba:	9b02      	ldr	r3, [sp, #8]
     dbc:	9a05      	ldr	r2, [sp, #20]
     dbe:	930e      	str	r3, [sp, #56]	; 0x38
     dc0:	920f      	str	r2, [sp, #60]	; 0x3c
     dc2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
     dc4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
     dc6:	1812      	adds	r2, r2, r0
     dc8:	414b      	adcs	r3, r1       ; B = (B >> 32) + (uint64_t)d0 * key->n[i] + (uint32_t)A;
     dca:	9206      	str	r2, [sp, #24]    ; L32(B)
     dcc:	9307      	str	r3, [sp, #28]    ; H32(B)
     dce:	1f33      	subs	r3, r6, #4   ; idx - 1
     dd0:	601a      	str	r2, [r3, #0]     ; c[i-1] = (uint32_t)B;
     dd2:	9b00      	ldr	r3, [sp, #0]
     dd4:	3604      	adds	r6, #4
     dd6:	3301      	adds	r3, #1
     dd8:	9300      	str	r3, [sp, #0]
     dda:	e7be      	b.n	d5a <montMulAdd+0x52>
     
     ddc:	9807      	ldr	r0, [sp, #28]   ;H32(B)
     dde:	9a03      	ldr	r2, [sp, #12]   ;H32(A)
     de0:	2300      	movs	r3, #0
     de2:	1c19      	adds	r1, r3, #0 ; r1 = r3 + 0 = 0
     de4:	1812      	adds	r2, r2, r0 ; r2 = r2 + r0 = H32(B) + H32(A)   L32(A)
     de6:	414b      	adcs	r3, r1   
     de8:	9800      	ldr	r0, [sp, #0]
     dea:	4906      	ldr	r1, [pc, #24]	; (e04 <montMulAdd+0xfc>)
     dec:	1845      	adds	r5, r0, r1
     dee:	9809      	ldr	r0, [sp, #36]	; 0x24  r0 = base(c)
     df0:	00ad      	lsls	r5, r5, #2  ; i * 4
     df2:	502a      	str	r2, [r5, r0]    ; r2 --> c[i-1]
     df4:	2b00      	cmp	r3, #0
     df6:	d003      	beq.n	e00 <montMulAdd+0xf8>
     df8:	1c20      	adds	r0, r4, #0            ; r0 = key
     dfa:	9909      	ldr	r1, [sp, #36]	; 0x24    ; r1 = c
     dfc:	f7ff ff52 	bl	ca4 <subM>       ; subM(key,c)

     e00:	b013      	add	sp, #76	; 0x4c
     e02:	bdf0      	pop	{r4, r5, r6, r7, pc}
     e04:	3fffffff 	.word	0x3fffffff